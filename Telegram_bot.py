# -*- coding: utf-8 -*-
"""
Created on Mon Feb  3 15:43:14 2025

–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å hh.ru –ø–æ API

@author: irina
"""

import requests
import fake_useragent
from bs4 import BeautifulSoup
from telebot import TeleBot, types
import json
from collections import Counter
import re

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TOKEN = "7653647135:AAH2PSRO_6eE3yyrR3opc17PuMybs59KiuE"

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –∏ —É—Ä–æ–≤–Ω–∏ –æ–ø—ã—Ç–∞
regions = {"–ú–æ—Å–∫–≤–∞": 1, "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": 2}
levels = {"Junior": "noExperience", "Middle": "between1And3", "Senior": "moreThan6"}
categories = {"Data Analyst": "Data+Analyst", "Data Scientist": "Data+Scientist", "Data Engineer": "Data+Engineer"}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(TOKEN)

# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
def parse_vacancies(region_id, level_id, category_text):
    page_number = 0
    hrefs = []  # –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
    salaries = []  # –°–ø–∏—Å–æ–∫ –∑–∞—Ä–ø–ª–∞—Ç
    companies = []  # –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π

    while True:
        url = f'https://hh.ru/search/vacancy?area={region_id}&search_field=name&search_field=company_name&search_field=description&enable_snippets=false&experience={level_id}&text={category_text}&page={page_number}'
        user_ag = fake_useragent.UserAgent()

        try:
            response = requests.get(url, headers={"user-agent": user_ag.random}, timeout=10)
            soup = BeautifulSoup(response.content, "html.parser")
        except requests.exceptions.RequestException as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}\n"

        items = soup.find_all("div", class_="magritte-redesign")

        if not items:
            break

        for item in items:
            # –°–±–æ—Ä —Å—Å—ã–ª–æ–∫
            hre = item.find("a").get("href")
            hrefs.append(hre)

            # –°–±–æ—Ä –∑–∞—Ä–ø–ª–∞—Ç
            salary_tag = item.find("span", class_="magritte-text___pbpft_3-0-26 magritte-text_style-primary___AQ7MW_3-0-26 magritte-text_typography-label-1-regular___pi3R-_3-0-26")
            if salary_tag:
                salary_text = salary_tag.text.replace("\u202f", " ")  # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –ø—Ä–æ–±–µ–ª–∞
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
                salary = re.findall(r'\d+', salary_text)
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ü–∏—Ñ—Ä—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
                if salary:
                    salaries.append(int(salary[0]))  # –¥–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ (–ø–µ—Ä–≤–æ–µ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ü–∏—Ñ—Ä)

            # –°–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–π
            company_tag = item.find("a", class_="magritte-link___b4rEM_4-3-21 magritte-link_style_neutral___iqoW0_4-3-21")
            if company_tag:
                companies.append(company_tag.text.strip())

        page_number += 1
        
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤
    decoded_texts = []
    valid_links = []
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    for item in hrefs:
        if isinstance(item, str):
            if item.startswith("https://") or item.startswith("http://"):
                valid_links.append(item)  # –≠—Ç–æ —Å—Å—ã–ª–∫–∞
            else:
                try:
                    # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É
                    decoded_text = json.loads(f'"{item}"')
                    # –ò—Å–∫–ª—é—á–∞–µ–º —è–≤–Ω—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if "%" not in decoded_text and "backurl" not in decoded_text:
                        decoded_texts.append(decoded_text)
                except json.JSONDecodeError:
                    continue

    top_ten_vacancies = valid_links[:10]
    vacancies_dict = {index: top_ten_vacancies for index, vacancy in enumerate(top_ten_vacancies)}
    #print(top_ten_vacancies)

    # –ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    avg_salary = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    
    if salaries:
        salaries_full = [salary * 1000 for salary in salaries]
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        avg_salary = round(sum(salaries_full) / len(salaries_full), 2)
        #print(f"–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {avg_salary}")
            
   

    # –¢–û–ü-10 –∫–æ–º–ø–∞–Ω–∏–π
    top_companies = Counter(companies).most_common(10)


    return {
        "vacancies": len(valid_links),
        "average_salary": avg_salary,
        "top_companies": top_companies,
        "links": vacancies_dict
    }

def send_links_in_batches(chat_id, links_dict, batch_size=5):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ –û–î–ò–ù –°–ü–ò–°–û–ö —Å—Å—ã–ª–æ–∫
    links = [link for link_list in links_dict.values() for link in link_list]

    for i in range(0, len(links), batch_size):
        batch = links[i:i + batch_size]
        message = "\n".join(batch)
        bot.send_message(chat_id, message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ú–æ—Å–∫–≤–∞", callback_data="–ú–æ—Å–∫–≤–∞"))
    markup.add(types.InlineKeyboardButton("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞
@bot.callback_query_handler(func=lambda call: call.data in regions)
def region_selection(call):
    region = call.data
    markup = types.InlineKeyboardMarkup()
    for level in levels:
        markup.add(types.InlineKeyboardButton(level, callback_data=f"{region}|{level}"))
    bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {region}. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
@bot.callback_query_handler(func=lambda call: '|' in call.data and len(call.data.split('|')) == 2)
def level_selection(call):
    region, level = call.data.split('|')
    markup = types.InlineKeyboardMarkup()
    for category in categories:
        markup.add(types.InlineKeyboardButton(category, callback_data=f"{region}|{level}|{category}"))
    bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {level} —É—Ä–æ–≤–µ–Ω—å –≤ {region}. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: len(call.data.split('|')) == 3)
def category_selection(call):
    region, level, category = call.data.split('|')
    region_id = regions[region]
    level_id = levels[level]
    category_text = categories[category]

    vacancies_data = parse_vacancies(region_id, level_id, category_text)
    if vacancies_data["vacancies"] > 0:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        bot.send_message(
            call.message.chat.id, 
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º:*\n"
            f"üîπ –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {vacancies_data['vacancies']}\n"
            f"üí∞ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {vacancies_data['average_salary']} —Ä—É–±.\n"
            f"üè¢ –¢–û–ü-3 –∫–æ–º–ø–∞–Ω–∏–∏:\n" + "\n".join([f"{c[0]} ‚Äî {c[1]} –≤–∞–∫–∞–Ω—Å–∏–π" for c in vacancies_data["top_companies"][:3]]),
            parse_mode="Markdown"
        )
        send_links_in_batches(call.message.chat.id, vacancies_data["links"])
        bot.send_message(
            call.message.chat.id, "–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ /start", parse_mode="Markdown"
        )
    else:
        bot.send_message(call.message.chat.id, "–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)